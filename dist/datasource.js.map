{"version":3,"sources":["../src/datasource.js"],"names":["_","GenericDatasource","instanceSettings","$q","backendSrv","templateSrv","type","url","name","q","withCredentials","headers","basicAuth","length","options","query","buildQueryParameters","targets","filter","t","hide","when","data","doRequest","method","then","response","status","message","title","replace","annotation","annotationQuery","range","datasource","enable","iconColor","rangeRaw","result","interpolated","target","mapToTextValue","scada","selScada","selDevice","device","map","d","i","text","value","isObject","datasourceRequest","node","tag","scadaId","scopedVars","deviceName","tagName","targetName","refId"],"mappings":"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","file":"datasource.js","sourcesContent":["import _ from \"lodash\";\n\nexport class GenericDatasource {\n\n  constructor(instanceSettings, $q, backendSrv, templateSrv) {\n    this.type = instanceSettings.type;\n    this.url = instanceSettings.url;\n    this.name = instanceSettings.name;\n    this.q = $q;\n    this.backendSrv = backendSrv;\n    this.templateSrv = templateSrv;\n    this.withCredentials = instanceSettings.withCredentials;\n    this.headers = {'Content-Type': 'application/json'};\n    if (typeof instanceSettings.basicAuth === 'string' && instanceSettings.basicAuth.length > 0) {\n      this.headers['Authorization'] = instanceSettings.basicAuth;\n    }\n  }\n\n  query(options) {\n    var query = this.buildQueryParameters(options);\n    query.targets = query.targets.filter(t => !t.hide);\n\n    if (query.targets.length <= 0) {\n      return this.q.when({data: []});\n    }\n\n    return this.doRequest({\n      url: this.url + '/query',\n      data: query,\n      method: 'POST'\n    });\n  }\n\n  testDatasource() {\n    return this.doRequest({\n      url: this.url + '/',\n      method: 'GET',\n    }).then(response => {\n      if (response.status === 200) {\n        return { status: \"success\", message: \"Data source is working\", title: \"Success\" };\n      }\n    });\n  }\n\n  annotationQuery(options) {\n    var query = this.templateSrv.replace(options.annotation.query, {}, 'glob');\n    var annotationQuery = {\n      range: options.range,\n      annotation: {\n        name: options.annotation.name,\n        datasource: options.annotation.datasource,\n        enable: options.annotation.enable,\n        iconColor: options.annotation.iconColor,\n        query: query\n      },\n      rangeRaw: options.rangeRaw\n    };\n\n    return this.doRequest({\n      url: this.url + '/annotations',\n      method: 'POST',\n      data: annotationQuery\n    }).then(result => {\n      return result.data;\n    });\n  }\n\n  metricFindQuery(query) {\n    var interpolated = {\n        target: this.templateSrv.replace(query, null, 'regex')\n    };\n\n    return this.doRequest({\n      url: this.url + '/search',\n      data: interpolated,\n      method: 'POST',\n    }).then(this.mapToTextValue);\n  }\n\n  metricFindQuery_scada(query) {\n    var interpolated = {\n        target: this.templateSrv.replace(query, null, 'regex')\n    };\n\n    return this.doRequest({\n      url: this.url + '/searchNode',\n      data: interpolated,\n      method: 'POST',\n    }).then(this.mapToTextValue);\n  }\n\n  metricFindQuery_device(query) {\n    if (query === 'select scada') {\n      return this.q.when({data: []});\n    }\n    var interpolated = {\n       scada: query\n    };\n\n    return this.doRequest({\n      url: this.url + '/searchDevice',\n      data: interpolated,\n      method: 'POST',\n    }).then(this.mapToTextValue);\n  }\n\n  metricFindQuery_tag(selScada, selDevice) {\n    if (selDevice === 'select device') {\n      return this.q.when({data: []});\n    }\n    var interpolated = {\n      scada: selScada,\n      device: selDevice\n    };\n\n    return this.doRequest({\n      url: this.url + '/searchTag',\n      data: interpolated,\n      method: 'POST',\n    }).then(this.mapToTextValue);\n  }\n\n\n  mapToTextValue(result) {\n    return _.map(result.data, (d, i) => {\n      if (d && d.text && d.value) {\n        return { text: d.text, value: d.value };\n      } else if (_.isObject(d)) {\n        return { text: d, value: i};\n      }\n      return { text: d, value: d };\n    });\n  }\n\n  doRequest(options) {\n    options.withCredentials = this.withCredentials;\n    options.headers = this.headers;\n\n    return this.backendSrv.datasourceRequest(options);\n  }\n\n  buildQueryParameters(options) {\n    //remove placeholder targets\n    options.targets = _.filter(options.targets, target => {\n      return (target.node !== 'select scada') && (target.device !== 'select device')&& (target.tag !== 'select tag');\n    });\n\n    var targets = _.map(options.targets, target => {\n      var scadaId = this.templateSrv.replace(target.scada, options.scopedVars, 'regex');\n      var deviceName = this.templateSrv.replace(target.device, options.scopedVars, 'regex');\n      var tagName = this.templateSrv.replace(target.tag, options.scopedVars, 'regex');\n      var targetName = scadaId + '#' + deviceName + '#' + tagName;\n      return {\n        target: targetName,\n        scada: scadaId,\n        device: deviceName,\n        tag: tagName,\n        refId: target.refId,\n        hide: target.hide,\n        type: target.type || 'timeserie'\n      };\n    });\n\n    options.targets = targets;\n\n    return options;\n  }\n\n}\n"]}